cmake_minimum_required(VERSION 3.0.2)
project(myclass CXX)

# By default CMake will install myclass to ~/ on Linux/Mac
# unless you override the install location manually. You can do this
# either by either running:
#  cmake -DCMAKE_INSTALL_PREFIX=/path/to/dir ..
# or by uncommenting and modifying this variable:
#SET(CMAKE_INSTALL_PREFIX "$ENV{HOME}")

#=============================================================================
# All done editing

#EXECUTE_PROCESS(COMMAND "echo" "$HOME" OUTPUT_VARIABLE HOME)
SET(myclass_VERSION "0.0")

INCLUDE("function.cmake")
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

SET(CMAKE_CXX_FLAGS "-O2 -std=c++0x ${CMAKE_CXX_FLAGS}")
STRING(REPLACE " " ";" CMAKE_CXX_FLAGS_LIST ${CMAKE_CXX_FLAGS})

SET(COMPILE_LOG "${CMAKE_BINARY_DIR}/.myclass.auto.cmake")

LIST(FIND FLAGS "NO_ROOT" no_root_index)
IF ("${no_root_index}" STREQUAL "-1")
  FIND_PACKAGE(Root)

  LIST(APPEND lin_LIBRARIES ${ROOT_LIBRARIES})
  LIST(APPEND lin_INCLUDE_DIRS ${ROOT_INCLUDE_DIR})

  SET(CMAKE_CXX_FLAGS "-O2 -std=c++0x ${ROOT_CPPFLAGS}")
ENDIF()

IF (GalpWrapper_ROOT_DIR AND EXISTS "${GalpWrapper_ROOT_DIR}")
  FIND_PACKAGE(GalpWrapper)

  IF (GalpWrapper_FOUND)
    ADD_DEFINITIONS(-DGALP_V${GalpWrapper_GALPROP_VERSION})
    LIST(APPEND work_LIBRARIES ${GalpWrapper_LIBRARIES})
    LIST(APPEND work_INCLUDE_DIRS ${GalpWrapper_INCLUDE_DIRS})
  ENDIF()
ENDIF()

EXECUTE_PROCESS(COMMAND echo "# This cmake is automatically generated by myclass, it
# include the information of the myclass compilation." OUTPUT_FILE ${COMPILE_LOG})
FOREACH(var flag lin_LIBRARIES lin_INCLUDE_DIRS work_LIBRARIES work_INCLUDE_DIRS)
  WRITE_OPTION(${var} "${${var}}")
ENDFOREACH()
WRITE_OPTION_APPEND(FLAGS "${FLAGS}")
WRITE_END()

MESSAGE("The compiling options set as:")
MESSAGE(STATUS "INSTALL PREFIX::                                        CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}")
MESSAGE(STATUS "Compiling flag::                                        CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
MESSAGE(STATUS "The class that would be excluded when compiling::       EXCLUDE = ${EXCLUDE}")
MESSAGE(STATUS "The class that you want to open the debug option::      DLIST = ${DLIST}")
MESSAGE(STATUS "The debug option: ['', '-D_DEBUG', '-DDEBUG_TO_FILE']:: DEBUG = ${DEBUG}")
MESSAGE(STATUS "The direction that Galpwrapper installed::              GalpWrapper_ROOT_DIR = ${GalpWrapper_ROOT_DIR}  [FOUND? ${GalpWrapper_FOUND}]")
MESSAGE(STATUS "Supported flag: [NO_ROOT]::                             FLAGS = ${FLAGS}")

SET(WORKLIST chi2prop mcparas anaspec_zhou)
SET(SUBMODULES antinucleus dm_production interpolator utils)
LIST(APPEND SUBMODULES ".")

FOREACH(module IN LISTS SUBMODULES)
  GET_FILENAME_COMPONENT(mdir ${CMAKE_SOURCE_DIR}/${module} ABSOLUTE)
  ADD_SUBMODULE("${mdir}" HEAD "${HEAD}" CLASS "${CLASS}")
ENDFOREACH(module)

FOREACH(inc IN LISTS HEAD)
  INCLUDE_DIRECTORIES(${inc})
ENDFOREACH(inc)
INCLUDE_DIRECTORIES(${lin_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${work_INCLUDE_DIRS})

FOREACH(cls IN LISTS CLASS)
  GET_FILENAME_COMPONENT(basename ${cls} NAME)
  LIST(FIND EXCLUDE ${basename} exindex)
  GET_CXX_FLAGS(${cls} "${CMAKE_CXX_FLAGS_LIST}" "${DLIST}" "${DEBUG}"
    TMPFLAGS)

  IF(exindex EQUAL -1)
    LIST(FIND WORKLIST ${basename} index)
    IF(index EQUAL -1)
      LIST(APPEND SRCLIN ${cls}/${basename}.cc)
      ADD_CUSTOM(${cls} "${TMPFLAGS}" "lins")
    ELSE(index EQUAL -1)
      LIST(APPEND SRCWORK ${cls}/${basename}.cc)
      ADD_CUSTOM(${cls} "${TMPFLAGS}" "works")
    ENDIF(index EQUAL -1)
  ENDIF(exindex EQUAL -1)
ENDFOREACH(cls)

ADD_LIBRARY(lins STATIC ${SRCLIN})
IF (GalpWrapper_FOUND)
  ADD_LIBRARY(works STATIC ${SRCWORK})
ENDIF()

FOREACH(cls IN LISTS HEAD)
  GET_FILENAME_COMPONENT(basename ${cls} NAME)
  LIST(APPEND CLSDIR ${cls}/)
ENDFOREACH(cls IN LISTS HEAD)

INSTALL(DIRECTORY ${CLSDIR} DESTINATION include
  FILES_MATCHING REGEX "(.*[.]h|.*[.]def)"
  REGEX "(_data|[.]git)" EXCLUDE)
INSTALL(DIRECTORY ${CLSDIR} DESTINATION lib
  FILES_MATCHING REGEX "_data"
  REGEX "(.*[.]h|.*[.]def|enumdef|[.]git)" EXCLUDE)
INSTALL(FILES ${COMPILE_LOG} DESTINATION share)

INSTALL(TARGETS lins LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
IF (GalpWrapper_FOUND)
  INSTALL(TARGETS works LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
ENDIF()
