FUNCTION(GET_CLSNAME FILELIST ROOTDIR NAMELIST)
  FOREACH(element IN LISTS FILELIST)
    GET_FILENAME_COMPONENT(elename ${element} NAME_WE)
    GET_FILENAME_COMPONENT(elepath ${element} DIRECTORY)
    GET_FILENAME_COMPONENT(elebasepath ${elepath} NAME_WE)
    IF("${elename}" STREQUAL "${elebasepath}")
      LIST(APPEND CLSNAME ${ROOTDIR}/${elename})
    ENDIF("${elename}" STREQUAL "${elebasepath}")
  ENDFOREACH(element)

  SET(${NAMELIST} ${CLSNAME} PARENT_SCOPE)
ENDFUNCTION(GET_CLSNAME)

FUNCTION(FIND_CLASS ROOTDIR POSTFIX CLASS)
  FILE(GLOB SOURCE ${ROOTDIR}/*/*.${POSTFIX})
  GET_CLSNAME("${SOURCE}" "${ROOTDIR}" CLS)
  SET(${CLASS} ${CLS} PARENT_SCOPE)
ENDFUNCTION(FIND_CLASS)

FUNCTION(ADD_SUBMODULE DIR HEAD HEADWHOLE CLASS CLASSWHOLE)
  FIND_CLASS(${DIR} "h" HEADCOMP)
  FIND_CLASS(${DIR} "cc" CLASSCOMP)

  LIST(APPEND HEADWHOLE ${HEADCOMP})
  LIST(APPEND CLASSWHOLE ${CLASSCOMP})

  SET(${HEAD} ${HEADWHOLE} PARENT_SCOPE)
  SET(${CLASS} ${CLASSWHOLE} PARENT_SCOPE)
ENDFUNCTION(ADD_SUBMODULE)

FUNCTION(GET_CXX_FLAGS class CXX_FLAGS DLIST DEBUG RESULT)
  GET_FILENAME_COMPONENT(basename ${class} NAME_WE)

  IF(DEBUG)
    LIST(FIND DLIST ${basename} index)
    IF(NOT index EQUAL -1)
      STRING(REPLACE " " ";" DEBUG ${DEBUG})
      LIST(APPEND CXX_FLAGS ${DEBUG})
    ENDIF(NOT index EQUAL -1)
  ENDIF(DEBUG)

  IF(EXISTS ${class}/${basename}_data)
    LIST(APPEND CXX_FLAGS
      "-DDATDIR=\\\"${CMAKE_INSTALL_PREFIX}/lib/${basename}_data\\\"")
  ENDIF(EXISTS ${class}/${basename}_data)

  SET(${RESULT} ${CXX_FLAGS} PARENT_SCOPE)
ENDFUNCTION(GET_CXX_FLAGS)

FUNCTION(ADD_LIBRARY_MYCLASS libname SOURCE)
  ADD_LIBRARY(${libname} STATIC ${SOURCE})

  FOREACH(source IN LISTS SOURCE)
    GET_FILENAME_COMPONENT(cls ${source} DIRECTORY)

    GET_CXX_FLAGS(${cls} "${CMAKE_CXX_FLAGS_LIST}" "${DLIST}" "${DEBUG}"
      TMPFLAGS)
    STRING(REPLACE ";" " " TMPFLAGS "${TMPFLAGS}")

    SET_SOURCE_FILES_PROPERTIES(${source} PROPERTIES COMPILE_FLAGS "${TMPFLAGS}")
  ENDFOREACH(source)
ENDFUNCTION(ADD_LIBRARY_MYCLASS)

FUNCTION(WRITE_OPTION VNAME VAR)
  EXEC_PROGRAM(echo ARGS
"\"IF(NOT ${VNAME})
  SET(${VNAME} \\\"${VAR}\\\")
ENDIF(NOT ${VNAME})\n\" >> ${COMPILE_LOG}"
  OUTPUT_VARIABLE VAROUT)
ENDFUNCTION(WRITE_OPTION VNAME VAR)

FUNCTION(ADOPT_FLAGS FLAGS)
  IF(FLAGS)
    STRING(REPLACE " " ";" FLAGS ${FLAGS})
    FOREACH(flag IN LISTS FLAGS)
      ADD_DEFINITIONS(-D${flag})
    ENDFOREACH(flag IN LISTS FLAGS)
  ENDIF(FLAGS)
ENDFUNCTION(ADOPT_FLAGS FLAGS)

FUNCTION(GET_VAR_NAME INVAR OUT)
  SET(INVAR $ {${INVAR}})
  STRING(REPLACE ";" "" INVAR ${INVAR})
  SET(${OUT} ${INVAR} PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(WRITE_OPTION_APPEND VNAME VAR)
  GET_VAR_NAME(${VNAME} ${VNAME}NAME)
  EXEC_PROGRAM(echo ARGS
"\"IF(${VNAME})
  SET(${VNAME} \\\"\\${${VNAME}NAME} ${VAR}\\\")
ELSE(${VNAME})
  SET(${VNAME} \\\"${VAR}\\\")
ENDIF(${VNAME})\n\" >> ${COMPILE_LOG}"
  OUTPUT_VARIABLE VAROUT)
ENDFUNCTION()

FUNCTION(WRITE_END)
  FOREACH(var FLAGS flag lin_LIBRARY lin_LIBRARIES lin_INCLUDE_DIRS
      work_LIBRARY work_LIBRARIES work_INCLUDE_DIRS)
    GET_VAR_NAME(${var} ${var}NAME)
  ENDFOREACH()

  EXEC_PROGRAM(echo ARGS
"\"IF(FLAGS)
  STRING(REPLACE \\\" \\\" \\\";\\\" FLAGS_TMP \\${FLAGSNAME})
  FOREACH(flag IN LISTS FLAGS_TMP)
  ADD_DEFINITIONS(-D\\${flagNAME})
  ENDFOREACH(flag IN LISTS FLAGS_TMP)
ENDIF(FLAGS)

FIND_LIBRARY(lin_LIBRARY lins
  HINTS ${CMAKE_INSTALL_PREFIX}
  PATH_SUFFIXES lib64 lib
  DOC \"Path to the GalpWrapper library\"
  )

SET(lin_LIBRARIES \\${lin_LIBRARYNAME} \\${lin_LIBRARIESNAME})
SET(lin_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include \\${lin_INCLUDE_DIRSNAME})

FIND_LIBRARY(work_LIBRARY works
  HINTS ${CMAKE_INSTALL_PREFIX}
  PATH_SUFFIXES lib64 lib
  DOC \"Path to the GalpWrapper library\"
  )

SET(work_LIBRARIES \\${work_LIBRARYNAME} \\${work_LIBRARIESNAME})
SET(work_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/include \\${work_INCLUDE_DIRSNAME})
\" >> ${COMPILE_LOG}
" OUTPUT_VARIABLE VAROUT)
ENDFUNCTION()
